# Задача: Разработать простую игру, где игрок может использовать различные типы оружия для борьбы
# с монстрами. Программа должна быть спроектирована таким образом, чтобы легко можно было добавлять
# новые типы оружия, не изменяя существующий код бойцов или механизм боя.
#
# Исходные данные:
# - Есть класс `Fighter`, представляющий бойца.
# - Есть класс `Monster`, представляющий монстра.
# - Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.
#
# Шаг 1:Создайте абстрактный класс для оружия
# - Создайте абстрактный класс `Weapon`, который будет содержать абстрактный метод `attack()`.
# Шаг 2: Реализуйте конкретные типы оружия
# - Создайте несколько классов, унаследованных от `Weapon`, например, `Sword` и `Bow`. Каждый из этих
# классов реализует метод `attack()` своим уникальным способом.
#
# Шаг 3: Модифицируйте класс `Fighter`
# - Добавьте в класс `Fighter` поле, которое будет хранить объект класса `Weapon`.
# - Добавьте метод `changeWeapon()`, который позволяет изменить оружие бойца.
#
# Шаг 4: Реализация боя
# - Реализуйте простой механизм для демонстрации боя между бойцом и монстром, исходя из выбранного оружия.
#
# Требования к заданию:
# - Код должен быть написан на Python.
# - Программа должна демонстрировать применение принципа открытости/закрытости: новые типы оружия можно
# легко добавлять, не изменяя существующие классы бойцов и механизм боя.
# - Программа должна выводить результат боя в консоль.
#
# Пример результата:
# Боец выбирает меч.
# Боец наносит удар мечом.
# Монстр побежден!
# Боец выбирает лук.
# Боец наносит удар из лука.
# Монстр побежден!

from abc import ABC, abstractmethod

# Шаг 1: Создаем абстрактный класс Weapon
class Weapon(ABC):

    @abstractmethod
    def attack(self):
        pass

# Шаг 2: Создаем конкретные реализации Weapon
class Sword(Weapon):
    def attack(self):
        return "наносит удар мечом"

class Bow(Weapon):
    def attack(self):
        return "наносит удар из лука"

# Создаем класс Fighter
class Fighter:
    def __init__(self):
        self.weapon = None

    def change_weapon(self, weapon):
        # изменяем оружие бойца
        self.weapon = weapon

    def make_attack(self):
        if self.weapon:
            # выбор оружия и атака
            print(f"Боец {self.weapon.attack()}")
        else:
            print("Боец без оружия!")

 # Создаем класс Monster
class Monster:
    def __init__(self):
        self.is_alive = True

def fight():
    fighter = Fighter()
    swords = Sword()
    bows = Bow()
    monsters = [Monster() for _ in range(2)]

    # Бой с мечом
    fighter.change_weapon(swords)
    for monster in monsters:
        fighter.make_attack()
        print("Монстр побежден!")

    # Бой с луком
    fighter.change_weapon(bows)
    for monster in monsters:
        fighter.make_attack()
        print("Монстр побежден!")

fight()